
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1_p1.Ventana;
import olc1_p1.Nodo;
import olc1_p1.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_JS2.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\003\000\002\012" +
    "\007\000\002\027\004\000\002\027\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\005\014\000\002\005\014\000\002\004" +
    "\011\000\002\004\011\000\002\004\006\000\002\015\004" +
    "\000\002\015\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\006\011\000\002" +
    "\006\013\000\002\010\011\000\002\016\004\000\002\016" +
    "\003\000\002\022\005\000\002\022\004\000\002\022\004" +
    "\000\002\007\012\000\002\007\011\000\002\007\010\000" +
    "\002\007\007\000\002\007\006\000\002\013\004\000\002" +
    "\013\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\011\011\000\002\011\010" +
    "\000\002\017\004\000\002\017\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\014" +
    "\012\000\002\014\011\000\002\014\011\000\002\014\010" +
    "\000\002\014\007\000\002\014\006\000\002\014\005\000" +
    "\002\014\004\000\002\020\010\000\002\020\007\000\002" +
    "\020\006\000\002\020\005\000\002\020\006\000\002\020" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\004\030\004\001\002\000\004\040\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\013\011\001\002\000" +
    "\024\020\027\021\026\022\012\023\013\024\032\025\031" +
    "\026\030\034\017\040\034\001\002\000\004\013\232\001" +
    "\002\000\004\011\210\001\002\000\026\014\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\034" +
    "\ufff9\040\ufff9\001\002\000\026\014\ufffc\020\ufffc\021\ufffc" +
    "\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\034\ufffc\040" +
    "\ufffc\001\002\000\026\014\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\034\ufffd\040\ufffd\001" +
    "\002\000\004\016\174\001\002\000\026\014\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\034" +
    "\ufff8\040\ufff8\001\002\000\026\014\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\034\ufff6\040" +
    "\ufff6\001\002\000\026\014\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\034\ufffb\040\ufffb\001" +
    "\002\000\026\014\173\020\027\021\026\022\012\023\013" +
    "\024\032\025\031\026\030\034\017\040\034\001\002\000" +
    "\026\014\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\034\ufff7\040\ufff7\001\002\000\026\014" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\034\ufff5\040\ufff5\001\002\000\006\011\157\022" +
    "\160\001\002\000\004\040\142\001\002\000\004\011\123" +
    "\001\002\000\004\013\113\001\002\000\004\011\077\001" +
    "\002\000\026\014\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\034\ufffa\040\ufffa\001\002\000" +
    "\010\006\035\011\036\015\037\001\002\000\004\006\075" +
    "\001\002\000\020\006\055\012\056\017\050\036\054\037" +
    "\052\040\060\041\053\001\002\000\010\036\040\037\041" +
    "\040\043\001\002\000\046\004\uffbc\005\uffbc\006\uffbc\010" +
    "\uffbc\012\uffbc\014\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\034\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\001\002\000\046\004\uffbb\005\uffbb\006\uffbb" +
    "\010\uffbb\012\uffbb\014\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\001\002\000\046\004\uffc0\005\uffc0\006" +
    "\044\010\045\012\uffc0\014\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\026\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\001\002\000\046\004\uffbd\005\uffbd" +
    "\006\uffbd\010\uffbd\012\uffbd\014\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\034\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\001\002\000\010\036\040\037" +
    "\041\040\043\001\002\000\042\004\uffc1\005\uffc1\012\uffc1" +
    "\014\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\001\002\000\044\004\uffc2\005\uffc2\010\047\012\uffc2\014" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\042\004\uffc3\005\uffc3\012\uffc3\014\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\034" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002\000\020" +
    "\006\uffd7\012\uffd7\017\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\001\002\000\020\006\uffdb\012\uffdb\017\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\001\002\000\030\004\uffcd\005" +
    "\uffcd\006\uffcd\010\uffcd\012\uffcd\015\uffcd\017\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\001\002\000\030\004\uffcc\005" +
    "\uffcc\006\uffcc\010\uffcc\012\uffcc\015\uffcc\017\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\001\002\000\030\004\uffce\005" +
    "\uffce\006\uffce\010\uffce\012\uffce\015\uffce\017\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\001\002\000\020\006\uffd9\012" +
    "\uffd9\017\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\004\013\072\001\002\000\020\006\055\012\063\017" +
    "\050\036\054\037\052\040\060\041\053\001\002\000\020" +
    "\006\uffda\012\uffda\017\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\001\002\000\020\006\uffd8\012\uffd8\017\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\001\002\000\020\006\uffdc\012" +
    "\uffdc\017\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\032\010\064\013\065\014\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\034\uffdd\040\uffdd" +
    "\001\002\000\026\014\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\034\uffde\040\uffde\001\002" +
    "\000\024\020\027\021\026\022\012\023\013\024\032\025" +
    "\031\026\030\034\017\040\034\001\002\000\026\014\070" +
    "\020\027\021\026\022\012\023\013\024\032\025\031\026" +
    "\030\034\017\040\034\001\002\000\026\014\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\034" +
    "\ufffe\040\ufffe\001\002\000\030\010\071\014\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\034" +
    "\uffe0\040\uffe0\001\002\000\026\014\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\040" +
    "\uffe1\001\002\000\024\020\027\021\026\022\012\023\013" +
    "\024\032\025\031\026\030\034\017\040\034\001\002\000" +
    "\026\014\074\020\027\021\026\022\012\023\013\024\032" +
    "\025\031\026\030\034\017\040\034\001\002\000\026\014" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\026\uffdf\034\uffdf\040\uffdf\001\002\000\044\004\uffbe\005" +
    "\uffbe\010\076\012\uffbe\014\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\034\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\001\002\000\042\004\uffbf\005\uffbf" +
    "\012\uffbf\014\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\034\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\001\002\000\016\004\102\005\100\036\054\037" +
    "\052\040\104\041\053\001\002\000\022\004\uffea\005\uffea" +
    "\010\uffea\012\uffea\036\uffea\037\uffea\040\uffea\041\uffea\001" +
    "\002\000\022\004\uffee\005\uffee\010\uffee\012\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\001\002\000\022\004\uffec\005" +
    "\uffec\010\uffec\012\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\001\002\000\020\004\102\005\100\012\107\036\054\037" +
    "\052\040\104\041\053\001\002\000\022\004\uffed\005\uffed" +
    "\010\uffed\012\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001" +
    "\002\000\022\004\uffeb\005\uffeb\010\uffeb\012\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\001\002\000\022\004\uffef\005" +
    "\uffef\010\uffef\012\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\001\002\000\004\013\110\001\002\000\024\020\027\021" +
    "\026\022\012\023\013\024\032\025\031\026\030\034\017" +
    "\040\034\001\002\000\026\014\112\020\027\021\026\022" +
    "\012\023\013\024\032\025\031\026\030\034\017\040\034" +
    "\001\002\000\026\014\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\034\uffe9\040\uffe9\001\002" +
    "\000\024\020\027\021\026\022\012\023\013\024\032\025" +
    "\031\026\030\034\017\040\034\001\002\000\026\014\115" +
    "\020\027\021\026\022\012\023\013\024\032\025\031\026" +
    "\030\034\017\040\034\001\002\000\004\024\116\001\002" +
    "\000\004\011\117\001\002\000\016\004\102\005\100\036" +
    "\054\037\052\040\104\041\053\001\002\000\020\004\102" +
    "\005\100\012\121\036\054\037\052\040\104\041\053\001" +
    "\002\000\004\010\122\001\002\000\026\014\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\034" +
    "\uffe8\040\uffe8\001\002\000\004\040\124\001\002\000\004" +
    "\012\125\001\002\000\004\013\126\001\002\000\010\031" +
    "\131\032\127\033\130\001\002\000\004\010\141\001\002" +
    "\000\004\007\140\001\002\000\004\036\136\001\002\000" +
    "\012\014\134\031\131\032\127\033\130\001\002\000\012" +
    "\014\uffe5\031\uffe5\032\uffe5\033\uffe5\001\002\000\026\014" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\034\uffe7\040\uffe7\001\002\000\012\014\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\001\002\000\004\007\137\001\002" +
    "\000\012\014\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000" +
    "\012\014\uffe2\031\uffe2\032\uffe2\033\uffe2\001\002\000\012" +
    "\014\uffe3\031\uffe3\032\uffe3\033\uffe3\001\002\000\044\004" +
    "\uffc4\005\uffc4\010\143\014\uffc4\015\144\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\034\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\001\002\000\040\004\uffc5" +
    "\005\uffc5\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\001\002\000\012\027\145\036\040\037\041\040" +
    "\043\001\002\000\004\011\153\001\002\000\044\004\uffc6" +
    "\005\uffc6\006\147\010\150\014\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\001\002\000\010\036\040\037" +
    "\041\040\043\001\002\000\040\004\uffc7\005\uffc7\014\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\001\002" +
    "\000\042\004\uffc8\005\uffc8\010\152\014\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\034\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000\040\004" +
    "\uffc9\005\uffc9\014\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\034\uffc9\036\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\001\002\000\010\036\040\037\041\040\043" +
    "\001\002\000\004\012\155\001\002\000\042\004\uffca\005" +
    "\uffca\010\156\014\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\001\002\000\040\004\uffcb\005\uffcb\014\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002" +
    "\000\016\004\102\005\100\036\054\037\052\040\104\041" +
    "\053\001\002\000\004\011\161\001\002\000\004\012\162" +
    "\001\002\000\004\013\163\001\002\000\024\020\027\021" +
    "\026\022\012\023\013\024\032\025\031\026\030\034\017" +
    "\040\034\001\002\000\026\014\165\020\027\021\026\022" +
    "\012\023\013\024\032\025\031\026\030\034\017\040\034" +
    "\001\002\000\026\014\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\025\ufff1\026\ufff1\034\ufff1\040\ufff1\001\002" +
    "\000\020\004\102\005\100\012\167\036\054\037\052\040" +
    "\104\041\053\001\002\000\004\013\170\001\002\000\024" +
    "\020\027\021\026\022\012\023\013\024\032\025\031\026" +
    "\030\034\017\040\034\001\002\000\026\014\172\020\027" +
    "\021\026\022\012\023\013\024\032\025\031\026\030\034" +
    "\017\040\034\001\002\000\026\014\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2\040" +
    "\ufff2\001\002\000\004\002\uffff\001\002\000\004\035\175" +
    "\001\002\000\004\011\176\001\002\000\016\006\177\015" +
    "\204\036\054\037\052\040\201\041\053\001\002\000\020" +
    "\006\uffd1\012\uffd1\015\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\001\002\000\020\006\uffd3\012\uffd3\015\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\001\002\000\020\006\uffd2\012" +
    "\uffd2\015\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002" +
    "\000\020\006\177\012\206\015\204\036\054\037\052\040" +
    "\201\041\053\001\002\000\020\006\uffd0\012\uffd0\015\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000\020\006" +
    "\uffcf\012\uffcf\015\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\001\002\000\020\006\uffd4\012\uffd4\015\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\001\002\000\030\010\207\014\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\034\uffd5\040\uffd5\001\002\000\026\014\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\034" +
    "\uffd6\040\uffd6\001\002\000\006\020\027\040\213\001\002" +
    "\000\016\004\102\005\100\036\054\037\052\040\104\041" +
    "\053\001\002\000\016\004\102\005\100\036\054\037\052" +
    "\040\104\041\053\001\002\000\006\006\035\015\037\001" +
    "\002\000\020\004\102\005\100\010\215\036\054\037\052" +
    "\040\104\041\053\001\002\000\004\040\213\001\002\000" +
    "\004\012\217\001\002\000\004\013\220\001\002\000\024" +
    "\020\027\021\026\022\012\023\013\024\032\025\031\026" +
    "\030\034\017\040\034\001\002\000\026\014\222\020\027" +
    "\021\026\022\012\023\013\024\032\025\031\026\030\034" +
    "\017\040\034\001\002\000\026\014\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\034\ufff3\040" +
    "\ufff3\001\002\000\020\004\102\005\100\010\224\036\054" +
    "\037\052\040\104\041\053\001\002\000\016\006\177\015" +
    "\204\036\054\037\052\040\201\041\053\001\002\000\020" +
    "\006\177\012\226\015\204\036\054\037\052\040\201\041" +
    "\053\001\002\000\004\013\227\001\002\000\024\020\027" +
    "\021\026\022\012\023\013\024\032\025\031\026\030\034" +
    "\017\040\034\001\002\000\026\014\231\020\027\021\026" +
    "\022\012\023\013\024\032\025\031\026\030\034\017\040" +
    "\034\001\002\000\026\014\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\025\ufff4\026\ufff4\034\ufff4\040\ufff4\001" +
    "\002\000\024\020\027\021\026\022\012\023\013\024\032" +
    "\025\031\026\030\034\017\040\034\001\002\000\026\014" +
    "\234\020\027\021\026\022\012\023\013\024\032\025\031" +
    "\026\030\034\017\040\034\001\002\000\026\014\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\034\ufff0\040\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\002\005\012\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\015\004\021\005\032\006" +
    "\013\007\023\010\017\011\020\014\014\020\024\027\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\066\004\021\005\032\006\013\007\023\010\017" +
    "\011\020\014\014\020\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\056" +
    "\021\060\023\050\001\001\000\004\026\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\060" +
    "\023\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\015\004\021\005\032\006\013\007\023\010\017\011" +
    "\020\014\014\020\024\027\065\001\001\000\024\003\066" +
    "\004\021\005\032\006\013\007\023\010\017\011\020\014" +
    "\014\020\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\015\004\021\005\032\006" +
    "\013\007\023\010\017\011\020\014\014\020\024\027\072" +
    "\001\001\000\024\003\066\004\021\005\032\006\013\007" +
    "\023\010\017\011\020\014\014\020\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\102\021\104\025\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\104\025\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\015\004\021\005\032\006" +
    "\013\007\023\010\017\011\020\014\014\020\024\027\110" +
    "\001\001\000\024\003\066\004\021\005\032\006\013\007" +
    "\023\010\017\011\020\014\014\020\024\001\001\000\002" +
    "\001\001\000\026\003\015\004\021\005\032\006\013\007" +
    "\023\010\017\011\020\014\014\020\024\027\113\001\001" +
    "\000\024\003\066\004\021\005\032\006\013\007\023\010" +
    "\017\011\020\014\014\020\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\117\021\104\025\100\001" +
    "\001\000\006\021\104\025\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\131\022\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\165\021\104\025\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\015\004\021" +
    "\005\032\006\013\007\023\010\017\011\020\014\014\020" +
    "\024\027\163\001\001\000\024\003\066\004\021\005\032" +
    "\006\013\007\023\010\017\011\020\014\014\020\024\001" +
    "\001\000\002\001\001\000\006\021\104\025\105\001\001" +
    "\000\002\001\001\000\026\003\015\004\021\005\032\006" +
    "\013\007\023\010\017\011\020\014\014\020\024\027\170" +
    "\001\001\000\024\003\066\004\021\005\032\006\013\007" +
    "\023\010\017\011\020\014\014\020\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\201\021\202\024\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\202\024\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\210\020\211\001\001\000\010\015\222\021\104" +
    "\025\100\001\001\000\010\015\213\021\104\025\100\001" +
    "\001\000\002\001\001\000\006\021\104\025\105\001\001" +
    "\000\004\020\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\015\004\021\005\032\006\013\007\023" +
    "\010\017\011\020\014\014\020\024\027\220\001\001\000" +
    "\024\003\066\004\021\005\032\006\013\007\023\010\017" +
    "\011\020\014\014\020\024\001\001\000\002\001\001\000" +
    "\006\021\104\025\105\001\001\000\010\017\224\021\202" +
    "\024\177\001\001\000\006\021\202\024\204\001\001\000" +
    "\002\001\001\000\026\003\015\004\021\005\032\006\013" +
    "\007\023\010\017\011\020\014\014\020\024\027\227\001" +
    "\001\000\024\003\066\004\021\005\032\006\013\007\023" +
    "\010\017\011\020\014\014\020\024\001\001\000\002\001" +
    "\001\000\026\003\015\004\021\005\032\006\013\007\023" +
    "\010\017\011\020\014\014\020\024\027\232\001\001\000" +
    "\024\003\066\004\021\005\032\006\013\007\023\010\017" +
    "\011\020\014\014\020\024\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public String resultado = "";
        public static Nodo raiz; 
        
        public Nodo getRaiz(){
            return raiz;
        }
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
            Errores nuevo_error = new Errores("Error sintactico", s.value.toString(), s.right+1, s.left+1);
            Ventana.lista_errores.add(nuevo_error);
            System.out.println(nuevo_error.tipo + " " +   nuevo_error.valor + " " + nuevo_error.fila);
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
            Errores nuevo_error = new Errores("Error sintactico (No recuperado)", s.value.toString(), s.right+1, s.left+1);
            Ventana.lista_errores.add(nuevo_error);
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS2$actions {

  
  private final SintacticoJS2 parser;

  /** Constructor */
  CUP$SintacticoJS2$actions(SintacticoJS2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS2$do_action_part00000000(
    int                        CUP$SintacticoJS2$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS2$parser,
    java.util.Stack            CUP$SintacticoJS2$stack,
    int                        CUP$SintacticoJS2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS2$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS2$parser.done_parsing();
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		  parser.raiz = a;  
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASS ::= ClassJS identificador lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                            Nodo padre = new Nodo("CLASS","",0,0);
                                                            padre.AddHijo(new Nodo("ClassJS", a, aright, aleft));
                                                            padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                            padre.AddHijo(new Nodo("lla", c, cright, cleft));
                                                            padre.AddHijo(d);
                                                            padre.AddHijo(new Nodo("llc", e, eright, eleft));
                                                            RESULT = padre;
                                                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CLASS",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INST ::= INST INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    padre.AddHijo(b);
                                    RESULT = padre;
                               
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INST",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= INSTRUCCIONES 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                padre.AddHijo(a);
                                RESULT = padre;
                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INST",21, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= METODO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= CONSOLE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                    Nodo padre = new Nodo("INSTRUCCIONES","",0,0);
                                    padre.AddHijo(a);
                                    RESULT = padre;
                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FOR ::= For para DECLARACION COMPARACIONES pyc CONCATENACION parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                                        Nodo padre = new Nodo("FOR","",0,0);
                                                                                                        padre.AddHijo(new Nodo("For", a, aright, aleft));
                                                                                                        padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                                        padre.AddHijo(c);
                                                                                                        padre.AddHijo(d);
                                                                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                                                                        padre.AddHijo(f);
                                                                                                        padre.AddHijo(new Nodo("parc", g, gright, gleft));
                                                                                                        padre.AddHijo(new Nodo("lla", h, hright, hleft));
                                                                                                        padre.AddHijo(i);
                                                                                                        padre.AddHijo(new Nodo("llc", j, jright, jleft));
                                                                                                        RESULT = padre;
                                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FOR ::= For para ASIGNACION COMPARACIONES pyc ASIGNACION parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                                        Nodo padre = new Nodo("FOR","",0,0);
                                                                                                        padre.AddHijo(new Nodo("For", a, aright, aleft));
                                                                                                        padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                                        padre.AddHijo(c);
                                                                                                        padre.AddHijo(d);
                                                                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                                                                        padre.AddHijo(f);
                                                                                                        padre.AddHijo(new Nodo("parc", g, gright, gleft));
                                                                                                        padre.AddHijo(new Nodo("lla", h, hright, hleft));
                                                                                                        padre.AddHijo(i);
                                                                                                        padre.AddHijo(new Nodo("llc", j, jright, jleft));
                                                                                                        RESULT = padre;
                                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IF ::= If para COMPARACIONES parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                    Nodo padre = new Nodo("IF","",0,0);
                                                                    padre.AddHijo(new Nodo("If", a, aright, aleft));
                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                    padre.AddHijo(c);
                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                    padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                    padre.AddHijo(f);
                                                                    padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                    RESULT = padre;
                                                               
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IF ::= If Else para parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                    Nodo padre = new Nodo("IF","",0,0);
                                                                    padre.AddHijo(new Nodo("If", a, aright, aleft));
                                                                    padre.AddHijo(new Nodo("Else", b, bright, bleft));
                                                                    padre.AddHijo(new Nodo("para", c, cright, cleft));
                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                    padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                    padre.AddHijo(f);
                                                                    padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                    RESULT = padre;
                                                               
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF ::= Else lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                    Nodo padre = new Nodo("IF","",0,0);
                                                                    padre.AddHijo(new Nodo("Else", a, aright, aleft));
                                                                    padre.AddHijo(new Nodo("lla", b, bright, bleft));
                                                                    padre.AddHijo(c);
                                                                    padre.AddHijo(new Nodo("llc", d, dright, dleft));
                                                                    RESULT = padre;
                                                               
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMPARACIONES ::= COMPARACIONES COMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                            Nodo padre = new Nodo("COMP","",0,0);
                                            padre.AddHijo(a);
                                            padre.AddHijo(b);
                                            RESULT = padre;
                                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COMPARACIONES ::= COMP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                            Nodo padre = new Nodo("COMP","",0,0);
                                            padre.AddHijo(a);
                                            RESULT = padre;
                                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMP ::= identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("COMP","",0,0);
                            padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMP",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMP ::= Op_rel 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("COMP","",0,0);
                            padre.AddHijo(new Nodo("Op_rel", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMP",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMP ::= E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("COMP","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMP",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMP ::= Op_log 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("COMP","",0,0);
                            padre.AddHijo(new Nodo("Op_log", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("COMP",19, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // WHILE ::= While para COMPARACIONES parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                        Nodo padre = new Nodo("WHILE","",0,0);
                                                                        padre.AddHijo(new Nodo("While", a, aright, aleft));
                                                                        padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                        padre.AddHijo(c);
                                                                        padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                        padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                        padre.AddHijo(f);
                                                                        padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                        RESULT = padre;
                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // WHILE ::= Do lla INST llc While para COMPARACIONES parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo g = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                Nodo padre = new Nodo("WHILE","",0,0);
                                                                                padre.AddHijo(new Nodo("Do", a, aright, aleft));
                                                                                padre.AddHijo(new Nodo("lla", b, bright, bleft));
                                                                                padre.AddHijo(c);
                                                                                padre.AddHijo(new Nodo("llc", d, dright, dleft));
                                                                                padre.AddHijo(new Nodo("While", e, eright, eleft));
                                                                                padre.AddHijo(new Nodo("para", f, fright, fleft));
                                                                                padre.AddHijo(g);
                                                                                padre.AddHijo(new Nodo("parc", h, hright, hleft));
                                                                                padre.AddHijo(new Nodo("pyc", i, iright, ileft));
                                                                                RESULT = padre;
                                                                             
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SWITCH ::= Switch para identificador parc lla CASOS llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                        Nodo padre = new Nodo("SWITCH","",0,0);
                                                                        padre.AddHijo(new Nodo("Switch", a, aright, aleft));
                                                                        padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                        padre.AddHijo(new Nodo("identificador", c, cright, cleft));
                                                                        padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                        padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                        padre.AddHijo(f);
                                                                        padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                        RESULT = padre;
                                                                      
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASOS ::= CASOS CASE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CASOS","",0,0);
                            padre.AddHijo(a);
                            padre.AddHijo(b);
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CASOS",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASOS ::= CASE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CASOS","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CASOS",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= Case numero dop 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                Nodo padre = new Nodo("CASE","",0,0);
                                padre.AddHijo(new Nodo("Case", a, aright, aleft));
                                padre.AddHijo(new Nodo("numero", b, bright, bleft));
                                padre.AddHijo(new Nodo("dop", c, cright, cleft));
                                RESULT = padre;
                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= Break pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                Nodo padre = new Nodo("CASE","",0,0);
                                padre.AddHijo(new Nodo("Break", a, aright, aleft));
                                padre.AddHijo(new Nodo("pyc", b, bright, bleft));
                                RESULT = padre;
                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE ::= Default dop 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                Nodo padre = new Nodo("CASE","",0,0);
                                padre.AddHijo(new Nodo("Default", a, aright, aleft));
                                padre.AddHijo(new Nodo("dop", b, bright, bleft));
                                RESULT = padre;
                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= identificador para PARAMETROS parc lla INST llc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                    Nodo padre = new Nodo("METODO","",0,0);
                                                                                    padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                                    padre.AddHijo(f);
                                                                                    padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                                    padre.AddHijo(new Nodo("pyc", h, hright, hleft));
                                                                                    RESULT = padre;
                                                                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO ::= identificador para PARAMETROS parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                    Nodo padre = new Nodo("METODO","",0,0);
                                                                                    padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("lla", e, eright, eleft));
                                                                                    padre.AddHijo(f);
                                                                                    padre.AddHijo(new Nodo("llc", g, gright, gleft));
                                                                                    RESULT = padre;
                                                                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO ::= identificador para parc lla INST llc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                    Nodo padre = new Nodo("METODO","",0,0);
                                                                                    padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("lla", d, dright, dleft));
                                                                                    padre.AddHijo(e);
                                                                                    padre.AddHijo(new Nodo("llc", f, fright, fleft));
                                                                                    RESULT = padre;
                                                                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO ::= identificador para PARAMETROS parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                    Nodo padre = new Nodo("METODO","",0,0);
                                                                                    padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                                                    RESULT = padre;
                                                                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= identificador para PARAMETROS parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                    Nodo padre = new Nodo("METODO","",0,0);
                                                                                    padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                                    padre.AddHijo(new Nodo("para", b, bright, bleft));
                                                                                    padre.AddHijo(c);
                                                                                    padre.AddHijo(new Nodo("parc", d, dright, dleft));
                                                                                    RESULT = padre;
                                                                                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETROS ::= PARAMETROS PAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                        Nodo padre = new Nodo("PARAMETROS","",0,0);
                                        padre.AddHijo(a);
                                        padre.AddHijo(b);
                                        RESULT = padre;
                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETROS ::= PAR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                        Nodo padre = new Nodo("PARAMETROS","",0,0);
                                        padre.AddHijo(a);
                                        RESULT = padre;
                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PAR ::= identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("PAR","",0,0);
                            padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PAR ::= Op_ari 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("PAR","",0,0);
                            padre.AddHijo(new Nodo("Op_ari", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PAR ::= E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("PAR","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PAR ::= coma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("PAR","",0,0);
                            padre.AddHijo(new Nodo("coma", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("PAR",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONSOLE ::= Console punto Log para CONCATENACION parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		  
                                                                            Nodo padre = new Nodo("CONSOLE","",0,0);
                                                                            padre.AddHijo(new Nodo("Console", a, aright, aleft));
                                                                            padre.AddHijo(new Nodo("punto", b, bright, bleft));
                                                                            padre.AddHijo(new Nodo("Log", c, cright, cleft));
                                                                            padre.AddHijo(new Nodo("para", d, dright, dleft));
                                                                            padre.AddHijo(e);
                                                                            padre.AddHijo(new Nodo("parc", f, fright, fleft));
                                                                            padre.AddHijo(new Nodo("pyc", g, gright, gleft));
                                                                            RESULT = padre;
                                                                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONSOLE ::= Console punto Log para CONCATENACION parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		   
                                                                            Nodo padre = new Nodo("CONSOLE","",0,0);
                                                                            padre.AddHijo(new Nodo("Console", a, aright, aleft));
                                                                            padre.AddHijo(new Nodo("punto", b, bright, bleft));
                                                                            padre.AddHijo(new Nodo("Log", c, cright, cleft));
                                                                            padre.AddHijo(new Nodo("para", d, dright, dleft));
                                                                            padre.AddHijo(e);
                                                                            padre.AddHijo(new Nodo("parc", f, fright, fleft));
                                                                            RESULT = padre;
                                                                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONCATENACION ::= CONCATENACION CON 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                            Nodo padre = new Nodo("CONCATENACION","",0,0);
                                            padre.AddHijo(a);
                                            padre.AddHijo(b);
                                            RESULT = padre;
                                       
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CONCATENACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONCATENACION ::= CON 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                            Nodo padre = new Nodo("CONCATENACION","",0,0);
                                            padre.AddHijo(a);
                                            RESULT = padre;
                                       
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CONCATENACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CON ::= identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CON","",0,0);
                            padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CON",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CON ::= Op_ari 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CON","",0,0);
                            padre.AddHijo(new Nodo("Op_ari", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CON",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CON ::= E 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CON","",0,0);
                            padre.AddHijo(a);
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CON",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CON ::= igual 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                            Nodo padre = new Nodo("CON","",0,0);
                            padre.AddHijo(new Nodo("igual", a, aright, aleft));
                            RESULT = padre;
                        
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("CON",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= numero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                    Nodo padre = new Nodo("E","",0,0);
                    padre.AddHijo(new Nodo("numero", a, aright, aleft));
                    RESULT = padre;
                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                    Nodo padre = new Nodo("E","",0,0);
                    padre.AddHijo(new Nodo("cadena", a, aright, aleft));
                    RESULT = padre;
                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= caracter 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                    Nodo padre = new Nodo("E","",0,0);
                    padre.AddHijo(new Nodo("caracter", a, aright, aleft));
                    RESULT = padre;
                
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("E",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= variable identificador igual Require para I parc pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(new Nodo("Require", d, dright, dleft));
                                                                                        padre.AddHijo(new Nodo("para", e, eright, eleft));
                                                                                        padre.AddHijo(f);
                                                                                        padre.AddHijo(new Nodo("parc", g, gright, gleft));
                                                                                        padre.AddHijo(new Nodo("pyc", h, hright, hleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= variable identificador igual Require para I parc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(new Nodo("Require", d, dright, dleft));
                                                                                        padre.AddHijo(new Nodo("para", e, eright, eleft));
                                                                                        padre.AddHijo(f);
                                                                                        padre.AddHijo(new Nodo("parc", g, gright, gleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= variable identificador igual I Op_ari I pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(d);
                                                                                        padre.AddHijo(new Nodo("Op_ari", e, eright, eleft));
                                                                                        padre.AddHijo(f);
                                                                                        padre.AddHijo(new Nodo("pyc", g, gright, gleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= variable identificador igual I Op_ari I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(d);
                                                                                        padre.AddHijo(new Nodo("Op_ari", e, eright, eleft));
                                                                                        padre.AddHijo(f);
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= variable identificador igual I pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(d);
                                                                                        padre.AddHijo(new Nodo("pyc", e, eright, eleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= variable identificador igual I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("igual", c, cright, cleft));
                                                                                        padre.AddHijo(d);
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= variable identificador pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        padre.AddHijo(new Nodo("pyc", c, cright, cleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= variable identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                                        Nodo padre = new Nodo("DECLARACION","",0,0);
                                                                                        padre.AddHijo(new Nodo("variable", a, aright, aleft));
                                                                                        padre.AddHijo(new Nodo("identificador", b, bright, bleft));
                                                                                        RESULT = padre;
                                                                                    
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("DECLARACION",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIGNACION ::= identificador igual I Op_ari I pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                                                padre.AddHijo(c);
                                                                padre.AddHijo(new Nodo("Op_ari", d, dright, dleft));
                                                                padre.AddHijo(e);
                                                                padre.AddHijo(new Nodo("pyc", f, fright, fleft));
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNACION ::= identificador igual I Op_ari I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                                                padre.AddHijo(c);
                                                                padre.AddHijo(new Nodo("Op_ari", d, dright, dleft));
                                                                padre.AddHijo(e);
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= identificador igual I pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                                                padre.AddHijo(c);
                                                                padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNACION ::= identificador igual I 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("igual", b, bright, bleft));
                                                                padre.AddHijo(c);
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNACION ::= identificador Op_ari Op_ari pyc 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("Op_ari", b, bright, bleft));
                                                                padre.AddHijo(new Nodo("Op_ari", c, cright, cleft));
                                                                padre.AddHijo(new Nodo("pyc", d, dright, dleft));
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNACION ::= identificador Op_ari Op_ari 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                                                                Nodo padre = new Nodo("ASIGNACION","",0,0);
                                                                padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                                                                padre.AddHijo(new Nodo("Op_ari", b, bright, bleft));
                                                                padre.AddHijo(new Nodo("Op_ari", c, cright, cleft));
                                                                RESULT = padre;
                                                            
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("ASIGNACION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.elementAt(CUP$SintacticoJS2$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // I ::= identificador 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                        Nodo padre =  new Nodo("I","",0,0);
                        padre.AddHijo(new Nodo("identificador", a, aright, aleft));
                        RESULT = padre;
                     
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("I",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // I ::= numero 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                        Nodo padre =  new Nodo("I","",0,0);
                        padre.AddHijo(new Nodo("numero", a, aright, aleft));
                        RESULT = padre;
                     
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("I",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // I ::= cadena 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJS2$stack.peek()).value;
		
                        Nodo padre =  new Nodo("I","",0,0);
                        padre.AddHijo(new Nodo("cadena", a, aright, aleft));
                        RESULT = padre;
                     
              CUP$SintacticoJS2$result = parser.getSymbolFactory().newSymbol("I",20, ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS2$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS2$do_action(
    int                        CUP$SintacticoJS2$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS2$parser,
    java.util.Stack            CUP$SintacticoJS2$stack,
    int                        CUP$SintacticoJS2$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS2$do_action_part00000000(
                               CUP$SintacticoJS2$act_num,
                               CUP$SintacticoJS2$parser,
                               CUP$SintacticoJS2$stack,
                               CUP$SintacticoJS2$top);
    }
}

}
