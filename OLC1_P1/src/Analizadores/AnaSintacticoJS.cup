/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;

//------> Codigo para el parser,variables, metodos
parser code{:

        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        
:}

//------> Codigo para las acciones gramaticales
action code
{:  :}

/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 
terminal String Op_rel, Op_log, Op_ari, dop, pyc, para, parc, lla, llc, igual, punto, coma;
terminal String variable, If, Else, For, While, Do, Switch, Require, ClassJS, Case, Break, Default, Console, Log;
terminal String numero, cadena, identificador, caracter;

//------> declaracion de no terminales
non terminal INICIO, INSTRUCCIONES;
non terminal IF, FOR, WHILE, METODO, SWITCH, CONSOLE;
non terminal PARAMETROS, DECLARACION, COMPARACIONES, CASOS, CONCATENACION;
non terminal E, CASE, PAR, CON, COMP, I;

//------> precedencia

start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

INICIO::= ClassJS identificador lla INSTRUCCIONES llc {::} 
       ;

INSTRUCCIONES::= INSTRUCCIONES DECLARACION   {::}
             |   DECLARACION                 {::}
             |   INSTRUCCIONES IF            {::}
             |   IF                          {::}
             |   INSTRUCCIONES  FOR          {::}
             |   FOR                         {::}
             |   INSTRUCCIONES  WHILE        {::}
             |   WHILE                       {::}
             |   INSTRUCCIONES  SWITCH       {::}
             |   SWITCH                      {::}
             |   INSTRUCCIONES  METODO       {::}
             |   METODO                      {::}
             |   INSTRUCCIONES  CONSOLE      {::}
             |   CONSOLE                     {::}
             ;


FOR::= For para DECLARACION COMPARACIONES pyc CONCATENACION parc lla INSTRUCCIONES llc {::}
    ;


IF::= If para COMPARACIONES parc lla INSTRUCCIONES llc   {::}
    | If Else para parc lla INSTRUCCIONES llc            {::}
    | Else lla INSTRUCCIONES llc                         {::}
    ;


COMPARACIONES::= COMPARACIONES COMP {::}
              |  COMP               {::}
              ;


COMP::= identificador {::}
    |   Op_rel        {::}
    |   E             {::}
    |   Op_log        {::}
    ;


WHILE::= While para COMPARACIONES parc lla INSTRUCCIONES llc        {::}
      |  Do lla INSTRUCCIONES llc While para COMPARACIONES parc pyc {::}
      ;


SWITCH::= Switch para identificador parc lla CASOS llc {::}
       ;


CASOS::= CASOS CASE {::}
      |  CASE
      ;


CASE::= Case numero dop {::}
    |   Break pyc       {::}
    |   Default dop     {::}
    ;


METODO::= identificador para PARAMETROS parc lla INSTRUCCIONES llc pyc   {::}
        | identificador para PARAMETROS parc lla INSTRUCCIONES llc       {::}
        | identificador para parc lla INSTRUCCIONES llc                  {::}
        | identificador para PARAMETROS parc pyc                         {::}
        | identificador para PARAMETROS parc                             {::}
        ;


PARAMETROS::= PARAMETROS PAR     {::}
           |  PAR                 {::}
           ;


PAR::= identificador {::}
    |  coma          {::}
    |  Op_ari        {::}
    |  E             {::}
    ;


CONSOLE::= Console punto Log para CONCATENACION parc pyc {::}
        |  Console punto Log para CONCATENACION parc     {::}
        ;


CONCATENACION::= CONCATENACION CON {::}
             |   CON               {::}
             ;


CON::= identificador {::}
    |  Op_ari        {::}
    |  E             {::}
    ;


E::= numero     {::}
   | cadena     {::}
   | caracter   {::}
   ;


DECLARACION::=  variable I igual I Op_ari I pyc     {::}
            |   variable I igual I Op_ari I         {::}
            |   variable I igual I pyc              {::}
            |   I igual I Op_ari I pyc              {::}
            |   variable I igual I                  {::}
            |   I igual I Op_ari I                  {::}
            |   variable I pyc                      {::}
            |   I igual I pyc                       {::}
            |   variable I                          {::}
            |   I igual I                           {::}
            ;


I::= identificador {::}
   | numero        {::}
   | cadena        {::}
   ;