/* The following code was generated by JFlex 1.6.1 */

/*--------------------------------------------------
 ------------  1ra Area: Codigo de Usuario ---------
 ---------------------------------------------------*/

//------> Paquetes,importaciones
package Analizadores;
import java_cup.runtime.*;
import javax.swing.JOptionPane;

/*----------------------------------------------------------
  ------------  2da Area: Opciones y Declaraciones ---------
  ----------------------------------------------------------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/AnaLexicoFCA.jflex</tt>
 */
public class Analizador_lexicoFCA implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  4,  9, 10,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    46,  0,  3,  6, 21,  0,  0,  0, 16, 17,  7,  0, 15,  0,  2,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 12, 11,  0, 18,  0,  0, 
     0, 38, 44, 39, 43, 22, 45, 32, 40, 30, 23,  5, 34, 41, 31, 35, 
    42,  5, 28, 26, 27, 33, 37,  5, 24, 36,  5, 19,  5, 20,  5,  5, 
     5, 38, 44, 39, 43, 22, 45, 32, 40, 30, 23,  5, 34, 41, 31, 35, 
    42,  5, 28, 26, 27, 33, 37,  5, 24, 36,  5, 13,  0, 14,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\4\1\1\10\4\1\20\3\0\1\4"+
    "\1\0\1\4\1\0\11\4\1\20\1\21\1\22\1\0"+
    "\1\4\1\0\1\4\1\0\11\4\1\20\1\22\1\23"+
    "\1\0\1\4\1\0\7\4\1\0\2\4\1\0\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\3\4\1\0\2\4"+
    "\2\24\2\25\1\4\1\0\2\4\1\0\3\4\1\0"+
    "\1\4\1\26\1\27\1\30\1\27\1\30\1\4\1\0"+
    "\1\4\2\31\2\32\1\33\1\4\1\0\2\4\3\0"+
    "\5\4\1\0\2\4\3\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\34\1\0\1\4\1\34\1\4\1\0"+
    "\2\4\1\0\2\4\2\0\2\4\1\0\2\4\1\0"+
    "\2\4\2\0\2\4\1\0\2\4\1\0\2\4\1\35"+
    "\1\36\1\35\1\36\1\0\2\4\1\0\2\4\1\0"+
    "\1\4\1\37\1\0\2\4\1\0\1\4\2\40\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\2\41\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\2\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\57\0\274\0\353\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\274"+
    "\0\274\0\57\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\57\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\57\0\u037d"+
    "\0\274\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\57\0\274\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\274\0\57\0\57\0\274\0\274"+
    "\0\u1057\0\u1086\0\u10b5\0\57\0\274\0\57\0\274\0\274"+
    "\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\57\0\u1608\0\u1637\0\274"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927"+
    "\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\u1ace\0\u1afd\0\u1b2c\0\57\0\57\0\274\0\274\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\274"+
    "\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\57\0\274\0\u1dbe"+
    "\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\57\0\274\0\u1ed8"+
    "\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050"+
    "\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\57\0\274";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\2"+
    "\1\5\1\0\1\5\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\6"+
    "\1\24\1\25\1\26\1\6\1\2\2\6\1\27\4\6"+
    "\1\30\1\31\1\32\2\6\1\33\1\34\2\6\1\5"+
    "\60\0\1\3\1\35\54\0\3\36\2\0\52\36\1\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\20\6\7\0\1\37\1\40\50\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\1\6\1\41\1\6"+
    "\1\0\3\6\1\0\20\6\34\0\1\42\24\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\1\6"+
    "\1\43\1\6\1\0\20\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\44\1\45"+
    "\17\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\1\46\2\6\1\0\2\6\1\47\1\0\20\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\10\6\1\50\7\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\2\6\1\51"+
    "\1\0\20\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\5\6\1\52\12\6"+
    "\2\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\0\3\6\1\53\14\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\1\54\2\6\1\0"+
    "\3\6\1\0\5\6\1\55\12\6\2\0\1\56\55\0"+
    "\3\36\1\57\1\0\52\36\4\37\1\60\3\37\1\60"+
    "\2\0\44\37\7\40\1\61\47\40\1\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\1\62\2\6\1\0\3\6"+
    "\1\0\20\6\35\0\1\63\23\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\2\6\1\64\1\0"+
    "\20\6\34\0\1\65\24\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\1\6\1\66\1\6\1\0"+
    "\20\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\1\6\1\67\16\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\10\6\1\70\7\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\4\6\1\71\13\6\2\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\11\6\1\72"+
    "\6\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\13\6\1\73\4\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\1\6\1\74\16\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\17\6\1\75\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\3\6\1\76\14\6"+
    "\2\0\1\77\61\0\1\60\3\0\1\60\46\0\6\40"+
    "\1\100\1\61\47\40\1\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\2\6\1\101\1\0\3\6\1\0\20\6"+
    "\36\0\2\102\21\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\102\1\103\17\6\42\0"+
    "\1\104\16\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\3\6\1\105\14\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\1\106\2\6"+
    "\1\0\3\6\1\0\20\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\17\6"+
    "\1\107\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\5\6\1\110\12\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\12\6\1\111\5\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\14\6\1\112\3\6\2\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\1\6\1\113\1\6\1\0"+
    "\20\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\114\1\115\17\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\16\6\1\116\1\6\40\0\1\117\20\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\1\6\1\120\16\6\43\0\1\121\15\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\4\6\1\122\13\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\2\6\1\123\1\0"+
    "\20\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\124\1\125\17\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\2\6"+
    "\1\126\1\0\20\6\2\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\127\1\130\17\6"+
    "\2\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\0\10\6\1\131\7\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\10\6\1\132\7\6\40\0\1\133\20\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\1\6\1\134\16\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\4\6"+
    "\1\135\13\6\41\0\1\136\17\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\2\6"+
    "\1\137\15\6\44\0\1\140\14\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\5\6"+
    "\1\141\12\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\10\6\1\142\7\6"+
    "\50\0\1\143\10\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\11\6\1\144\6\6"+
    "\2\0\1\6\3\0\1\6\15\0\2\6\1\0\1\145"+
    "\2\6\1\0\3\6\1\0\20\6\46\0\1\146\12\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\7\6\1\147\10\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\2\6\1\150"+
    "\1\0\20\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\1\6\1\151\1\6\1\0\3\6\1\0\20\6"+
    "\36\0\2\152\21\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\152\1\153\17\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\1\154\2\6"+
    "\1\0\3\6\1\0\20\6\31\0\1\155\13\0\1\156"+
    "\13\0\1\6\3\0\1\6\15\0\2\6\1\0\2\6"+
    "\1\157\1\0\3\6\1\0\6\6\1\160\11\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\2\6\1\161\1\0\20\6\47\0\1\162\11\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\10\6\1\163\7\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\164\1\165\2\6\1\0"+
    "\20\6\44\0\1\166\14\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\5\6\1\167"+
    "\12\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\1\170\2\6\1\0\3\6\1\0\20\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\1\171\2\6\1\0"+
    "\3\6\1\0\20\6\35\0\1\172\23\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\2\6\1\173"+
    "\1\0\20\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\2\6\1\174\1\0\20\6\43\0"+
    "\1\175\7\0\1\176\1\0\1\177\3\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\4\6\1\200\7\6\1\201\1\6\1\202\1\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\1\203\2\6"+
    "\1\0\3\6\1\0\2\6\1\204\15\6\41\0\1\205"+
    "\17\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\0\2\6\1\206\15\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\1\207\2\6\1\0"+
    "\3\6\1\0\20\6\36\0\2\210\55\0\2\211\66\0"+
    "\1\212\11\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\210\1\213\17\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\211\1\214\17\6\2\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\10\6\1\215"+
    "\7\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\216\1\217\2\6\1\0\20\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\1\220\2\6\1\0"+
    "\3\6\1\0\20\6\43\0\1\221\15\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\4\6\1\222\13\6\2\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\14\6\1\223"+
    "\3\6\40\0\1\224\45\0\1\225\64\0\1\226\23\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\1\6\1\227\16\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\1\230\2\6\1\0\3\6"+
    "\1\0\20\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\2\6\1\231\1\0\20\6\53\0"+
    "\1\232\5\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\14\6\1\233\3\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\1\6\1\234\16\6\44\0\1\235\14\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\5\6\1\236\12\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\0"+
    "\5\6\1\237\12\6\27\0\1\240\64\0\1\241\23\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\1\242\2\6"+
    "\1\0\3\6\1\0\20\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\2\6\1\243\1\0"+
    "\20\6\27\0\1\244\31\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\1\245\2\6\1\0\3\6\1\0\20\6"+
    "\2\0\1\6\3\0\1\6\15\0\2\6\1\0\1\246"+
    "\2\6\1\0\3\6\1\0\20\6\55\0\1\247\3\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\16\6\1\250\1\6\2\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\2\6\1\251"+
    "\1\0\20\6\47\0\1\252\56\0\1\253\11\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\0\3\6"+
    "\1\0\10\6\1\254\7\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\10\6"+
    "\1\255\7\6\50\0\1\256\10\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\11\6"+
    "\1\257\6\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\2\6\1\260\1\0\20\6\47\0"+
    "\1\261\11\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\0\10\6\1\262\7\6\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\1\6\1\263\1\6\1\0\20\6\32\0\2\264\55\0"+
    "\2\265\25\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\264\1\266\2\6\1\0\20\6\2\0\1\6"+
    "\3\0\1\6\15\0\2\6\1\0\3\6\1\265\1\267"+
    "\2\6\1\0\20\6\36\0\2\270\21\0\1\6\3\0"+
    "\1\6\15\0\2\6\1\0\3\6\1\0\3\6\1\270"+
    "\1\271\17\6\2\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\10\6\1\272\7\6"+
    "\43\0\1\273\15\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\0\3\6\1\0\4\6\1\274\13\6"+
    "\2\0\1\6\3\0\1\6\15\0\2\6\1\0\1\275"+
    "\2\6\1\0\3\6\1\0\20\6\56\0\1\276\2\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\0"+
    "\3\6\1\0\17\6\1\277\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\0\3\6\1\0\4\6"+
    "\1\300\13\6\27\0\1\301\31\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\1\302\2\6\1\0\3\6\1\0"+
    "\20\6\2\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\1\303\2\6\1\0\3\6\1\0\20\6\36\0\2\304"+
    "\21\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\304\1\305\17\6\32\0\2\306\25\0"+
    "\1\6\3\0\1\6\15\0\2\6\1\0\3\6\1\306"+
    "\1\307\2\6\1\0\20\6\2\0\1\6\3\0\1\6"+
    "\15\0\2\6\1\0\3\6\1\310\1\311\2\6\1\0"+
    "\20\6\50\0\1\312\10\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\11\6\1\313"+
    "\6\6\34\0\1\314\24\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\1\6\1\315\1\6\1\0"+
    "\20\6\44\0\1\316\14\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\5\6\1\317"+
    "\12\6\47\0\1\320\11\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\10\6\1\321"+
    "\7\6\54\0\1\322\4\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\0\15\6\1\323"+
    "\2\6\36\0\2\324\21\0\1\6\3\0\1\6\15\0"+
    "\2\6\1\0\3\6\1\0\3\6\1\324\1\325\17\6"+
    "\32\0\2\326\25\0\1\6\3\0\1\6\15\0\2\6"+
    "\1\0\3\6\1\326\1\327\2\6\1\0\20\6\34\0"+
    "\1\330\24\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\1\6\1\331\1\6\1\0\20\6\36\0"+
    "\2\332\21\0\1\6\3\0\1\6\15\0\2\6\1\0"+
    "\3\6\1\0\3\6\1\332\1\333\17\6\50\0\1\334"+
    "\10\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\0\11\6\1\335\6\6\44\0\1\336"+
    "\14\0\1\6\3\0\1\6\15\0\2\6\1\0\3\6"+
    "\1\0\3\6\1\0\5\6\1\337\12\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8554];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\10\11\2\1\1\11"+
    "\13\1\3\0\1\1\1\0\1\1\1\0\12\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\11\1\1\11"+
    "\2\1\1\0\1\1\1\0\7\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\3\1\1\0"+
    "\2\1\1\11\4\1\1\0\2\1\1\0\3\1\1\0"+
    "\2\1\2\11\3\1\1\0\1\1\1\11\1\1\1\11"+
    "\3\1\1\0\2\1\3\0\5\1\1\0\2\1\3\0"+
    "\3\1\1\0\2\1\1\0\2\1\1\0\1\11\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\0\2\1\2\0\2\1\1\0\2\1\1\0"+
    "\2\1\2\11\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_lexicoFCA(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosFCA.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico " + yytext() + "Linea: " + yyline + "Columna: " + yycolumn);
            }
          case 35: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" digito"); return new Symbol(SimbolosFCA.digito, yycolumn, yyline, yytext());
            }
          case 36: break;
          case 3: 
            { /* Espacios en blanco, se ignoran */
            }
          case 37: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" identificador"); return new Symbol(SimbolosFCA.identificador, yycolumn, yyline, yytext());
            }
          case 38: break;
          case 5: 
            { System.out.println("Reconocio "+yytext()+" pyc"); return new Symbol(SimbolosFCA.pyc, yycolumn, yyline, yytext());
            }
          case 39: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" dop"); return new Symbol(SimbolosFCA.dop, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" lla"); return new Symbol(SimbolosFCA.lla, yycolumn, yyline, yytext());
            }
          case 41: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" llc"); return new Symbol(SimbolosFCA.llc, yycolumn, yyline, yytext());
            }
          case 42: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(SimbolosFCA.coma, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" para"); return new Symbol(SimbolosFCA.para, yycolumn, yyline, yytext());
            }
          case 44: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" parc"); return new Symbol(SimbolosFCA.parc, yycolumn, yyline, yytext());
            }
          case 45: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(SimbolosFCA.igual, yycolumn, yyline, yytext());
            }
          case 46: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" cora"); return new Symbol(SimbolosFCA.cora, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" corc"); return new Symbol(SimbolosFCA.corc, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" dol"); return new Symbol(SimbolosFCA.dol, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" decimal"); return new Symbol(SimbolosFCA.decimal, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(SimbolosFCA.cadena, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 18: 
            { System.out.println("Comentario: "+yytext());
            }
          case 52: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" ejex"); return new Symbol(SimbolosFCA.ejex, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" string"); return new Symbol(SimbolosFCA.string, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" titulo"); return new Symbol(SimbolosFCA.titulo, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" doubleFCA"); return new Symbol(SimbolosFCA.doubleFCA, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" titulox"); return new Symbol(SimbolosFCA.titulox, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" tituloy"); return new Symbol(SimbolosFCA.tituloy, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" valores"); return new Symbol(SimbolosFCA.valores, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" archivo"); return new Symbol(SimbolosFCA.archivo, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" compare"); return new Symbol(SimbolosFCA.compare, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" pie"); return new Symbol(SimbolosFCA.pie, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" lineas"); return new Symbol(SimbolosFCA.lineas, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" barras"); return new Symbol(SimbolosFCA.barras, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" pgen"); return new Symbol(SimbolosFCA.pgen, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" globales"); return new Symbol(SimbolosFCA.globales, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" pesp"); return new Symbol(SimbolosFCA.pesp, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 34: 
            { System.out.println("Reconocio "+yytext()+" mein"); return new Symbol(SimbolosFCA.mein, yycolumn, yyline, yytext());
            }
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
