
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFCA extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosFCA.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFCA() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFCA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFCA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\006\000\002\004" +
    "\004\000\002\004\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\005\004\000" +
    "\002\005\003\000\002\003\007\000\002\003\007\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\006\006\000\002\007\006\000\002\010\011" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\022\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\021\013\023\015\024\012\001\002\000\012\007" +
    "\ufffa\021\ufffa\023\ufffa\024\ufffa\001\002\000\012\007\070" +
    "\021\013\023\015\024\012\001\002\000\004\006\064\001" +
    "\002\000\004\011\056\001\002\000\012\007\ufffe\021\ufffe" +
    "\023\ufffe\024\ufffe\001\002\000\004\006\017\001\002\000" +
    "\012\007\ufffc\021\ufffc\023\ufffc\024\ufffc\001\002\000\016" +
    "\014\023\015\021\016\027\017\026\020\025\025\024\001" +
    "\002\000\020\007\055\014\023\015\021\016\027\017\026" +
    "\020\025\025\024\001\002\000\004\005\051\001\002\000" +
    "\020\007\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\025\ufff8\001\002\000\004\030\045\001\002\000\004\030" +
    "\041\001\002\000\004\005\036\001\002\000\004\005\033" +
    "\001\002\000\004\005\030\001\002\000\004\027\031\001" +
    "\002\000\004\004\032\001\002\000\020\007\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\025\ufff4\001\002\000" +
    "\004\027\034\001\002\000\004\004\035\001\002\000\020" +
    "\007\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\025" +
    "\ufff3\001\002\000\004\027\037\001\002\000\004\004\040" +
    "\001\002\000\020\007\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\025\ufff2\001\002\000\004\013\042\001\002" +
    "\000\004\026\043\001\002\000\004\004\044\001\002\000" +
    "\020\007\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\025\ufff6\001\002\000\004\013\046\001\002\000\004\027" +
    "\047\001\002\000\004\004\050\001\002\000\020\007\ufff7" +
    "\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\025\ufff7\001" +
    "\002\000\004\030\052\001\002\000\004\004\053\001\002" +
    "\000\020\007\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\025\ufff5\001\002\000\020\007\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\020\ufff9\025\ufff9\001\002\000\012\007" +
    "\ufff1\021\ufff1\023\ufff1\024\ufff1\001\002\000\004\027\057" +
    "\001\002\000\004\010\060\001\002\000\004\027\061\001" +
    "\002\000\004\012\062\001\002\000\004\004\063\001\002" +
    "\000\012\007\uffef\021\uffef\023\uffef\024\uffef\001\002\000" +
    "\016\014\023\015\021\016\027\017\026\020\025\025\024" +
    "\001\002\000\020\007\066\014\023\015\021\016\027\017" +
    "\026\020\025\025\024\001\002\000\012\007\ufff0\021\ufff0" +
    "\023\ufff0\024\ufff0\001\002\000\012\007\ufffb\021\ufffb\023" +
    "\ufffb\024\ufffb\001\002\000\004\002\000\001\002\000\012" +
    "\007\uffff\021\uffff\023\uffff\024\uffff\001\002\000\012\007" +
    "\ufffd\021\ufffd\023\ufffd\024\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\010\006\013" +
    "\007\015\010\007\001\001\000\002\001\001\000\010\006" +
    "\070\007\071\010\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\021\005\017\001\001\000\004\003\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\021\005\064\001\001\000\004\003\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFCA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFCA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFCA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFCA$actions {

  
  private final SintacticoFCA parser;

  /** Constructor */
  CUP$SintacticoFCA$actions(SintacticoFCA parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFCA$do_action_part00000000(
    int                        CUP$SintacticoFCA$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFCA$parser,
    java.util.Stack            CUP$SintacticoFCA$stack,
    int                        CUP$SintacticoFCA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFCA$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFCA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFCA$parser.done_parsing();
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= mein lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION_GLOB 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= DECLARACION_GLOB 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION_GRAPH 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= DECLARACION_GRAPH 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES COMPARE 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= COMPARE 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INST ::= INST INSTRUCCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INST ::= INSTRUCCION 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= string identificador igual cadena pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= doubleFCA identificador igual decimal pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= titulo dop identificador pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= titulox dop cadena pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= tituloy dop cadena pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= archivo dop cadena pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_GLOB ::= globales lla INST llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOB",4, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_GRAPH ::= graficas lla INST llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACION_GRAPH",5, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COMPARE ::= compare para cadena coma cadena parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("COMPARE",6, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFCA$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFCA$do_action(
    int                        CUP$SintacticoFCA$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFCA$parser,
    java.util.Stack            CUP$SintacticoFCA$stack,
    int                        CUP$SintacticoFCA$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFCA$do_action_part00000000(
                               CUP$SintacticoFCA$act_num,
                               CUP$SintacticoFCA$parser,
                               CUP$SintacticoFCA$stack,
                               CUP$SintacticoFCA$top);
    }
}

}
