
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import olc1_p1.Comparar;
import java.util.LinkedList;
import Graficas.Caracteristica;
import Graficas.GBarras;
import Graficas.GPie;
import Graficas.Valor;
import Graficas.Variables;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoFCA extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SimbolosFCA.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoFCA() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoFCA(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoFCA(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\006\006\000\002\007\010\000\002\007\010\000\002" +
    "\007\007\000\002\007\007\000\002\016\006\000\002\005" +
    "\011\000\002\010\006\000\002\011\006\000\002\012\004" +
    "\000\002\012\003\000\002\013\006\000\002\013\010\000" +
    "\002\013\010\000\002\013\006\000\002\013\006\000\002" +
    "\013\006\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\014\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\025\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\024\010\026\021\032\023\033\014\034\017\001" +
    "\002\000\004\011\147\001\002\000\016\007\ufffd\024\ufffd" +
    "\026\ufffd\032\ufffd\033\ufffd\034\ufffd\001\002\000\016\007" +
    "\145\024\010\026\021\032\023\033\014\034\017\001\002" +
    "\000\016\007\ufffc\024\ufffc\026\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\001\002\000\004\006\142\001\002\000\016\007\ufff9" +
    "\024\ufff9\026\ufff9\032\ufff9\033\ufff9\034\ufff9\001\002\000" +
    "\016\007\ufffa\024\ufffa\026\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\001\002\000\004\006\137\001\002\000\016\007\ufffb\024" +
    "\ufffb\026\ufffb\032\ufffb\033\ufffb\034\ufffb\001\002\000\004" +
    "\006\110\001\002\000\016\007\ufffe\024\ufffe\026\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\001\002\000\004\006\024\001\002" +
    "\000\016\020\026\021\033\022\031\023\030\030\034\031" +
    "\027\001\002\000\020\007\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\030\uffee\031\uffee\001\002\000\004\005\105\001" +
    "\002\000\004\005\100\001\002\000\004\005\075\001\002" +
    "\000\004\005\072\001\002\000\020\007\071\020\026\021" +
    "\033\022\031\023\030\030\034\031\027\001\002\000\004" +
    "\005\065\001\002\000\004\005\035\001\002\000\004\014" +
    "\036\001\002\000\020\016\042\035\037\036\045\037\043" +
    "\040\041\041\046\042\040\001\002\000\010\004\uffe0\010" +
    "\uffe0\015\uffe0\001\002\000\010\004\uffe4\010\uffe4\015\uffe4" +
    "\001\002\000\010\004\uffe2\010\uffe2\015\uffe2\001\002\000" +
    "\004\006\054\001\002\000\010\004\uffe5\010\uffe5\015\uffe5" +
    "\001\002\000\006\010\051\015\050\001\002\000\010\004" +
    "\uffdf\010\uffdf\015\uffdf\001\002\000\010\004\uffe3\010\uffe3" +
    "\015\uffe3\001\002\000\006\010\uffe6\015\uffe6\001\002\000" +
    "\004\004\053\001\002\000\020\016\042\035\037\036\045" +
    "\037\043\040\041\041\046\042\040\001\002\000\006\010" +
    "\uffe7\015\uffe7\001\002\000\020\007\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\030\uffeb\031\uffeb\001\002\000\004\036" +
    "\055\001\002\000\004\010\056\001\002\000\004\040\057" +
    "\001\002\000\004\010\060\001\002\000\004\040\061\001" +
    "\002\000\004\010\062\001\002\000\004\040\063\001\002" +
    "\000\004\007\064\001\002\000\010\004\uffe1\010\uffe1\015" +
    "\uffe1\001\002\000\020\016\042\035\037\036\045\037\043" +
    "\040\041\041\046\042\040\001\002\000\004\004\067\001" +
    "\002\000\020\007\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\030\uffea\031\uffea\001\002\000\020\007\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\030\uffef\031\uffef\001\002\000\016" +
    "\007\ufff1\024\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1\001" +
    "\002\000\020\016\042\035\037\036\045\037\043\040\041" +
    "\041\046\042\040\001\002\000\004\004\074\001\002\000" +
    "\020\007\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\030\uffe9" +
    "\031\uffe9\001\002\000\020\016\042\035\037\036\045\037" +
    "\043\040\041\041\046\042\040\001\002\000\004\004\077" +
    "\001\002\000\020\007\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\030\uffe8\031\uffe8\001\002\000\004\014\101\001\002" +
    "\000\020\016\042\035\037\036\045\037\043\040\041\041" +
    "\046\042\040\001\002\000\006\010\051\015\103\001\002" +
    "\000\004\004\104\001\002\000\020\007\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\030\uffec\031\uffec\001\002\000\020" +
    "\016\042\035\037\036\045\037\043\040\041\041\046\042" +
    "\040\001\002\000\004\004\107\001\002\000\020\007\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\030\uffed\031\uffed\001" +
    "\002\000\006\017\111\027\112\001\002\000\004\041\133" +
    "\001\002\000\004\041\127\001\002\000\010\007\114\017" +
    "\115\027\116\001\002\000\016\007\ufff8\024\ufff8\026\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\001\002\000\004\041\123\001" +
    "\002\000\004\041\117\001\002\000\004\013\120\001\002" +
    "\000\020\016\042\035\037\036\045\037\043\040\041\041" +
    "\046\042\040\001\002\000\004\004\122\001\002\000\010" +
    "\007\ufff6\017\ufff6\027\ufff6\001\002\000\004\013\124\001" +
    "\002\000\020\016\042\035\037\036\045\037\043\040\041" +
    "\041\046\042\040\001\002\000\004\004\126\001\002\000" +
    "\010\007\ufff7\017\ufff7\027\ufff7\001\002\000\004\013\130" +
    "\001\002\000\020\016\042\035\037\036\045\037\043\040" +
    "\041\041\046\042\040\001\002\000\004\004\132\001\002" +
    "\000\010\007\ufff4\017\ufff4\027\ufff4\001\002\000\004\013" +
    "\134\001\002\000\020\016\042\035\037\036\045\037\043" +
    "\040\041\041\046\042\040\001\002\000\004\004\136\001" +
    "\002\000\010\007\ufff5\017\ufff5\027\ufff5\001\002\000\016" +
    "\020\026\021\033\022\031\023\030\030\034\031\027\001" +
    "\002\000\020\007\141\020\026\021\033\022\031\023\030" +
    "\030\034\031\027\001\002\000\016\007\ufff3\024\ufff3\026" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\001\002\000\016\020\026" +
    "\021\033\022\031\023\030\030\034\031\027\001\002\000" +
    "\020\007\144\020\026\021\033\022\031\023\030\030\034" +
    "\031\027\001\002\000\016\007\ufff0\024\ufff0\026\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\001\002\000\004\002\000\001\002" +
    "\000\016\007\uffff\024\uffff\026\uffff\032\uffff\033\uffff\034" +
    "\uffff\001\002\000\004\040\150\001\002\000\004\010\151" +
    "\001\002\000\004\040\152\001\002\000\004\012\153\001" +
    "\002\000\004\004\154\001\002\000\016\007\ufff2\024\ufff2" +
    "\026\ufff2\032\ufff2\033\ufff2\034\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\011\004\021" +
    "\005\015\006\010\010\012\011\017\016\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\145\005\015" +
    "\006\010\010\012\011\017\016\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\031\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\043\015\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\101\015\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\137\013\024\001\001\000\004" +
    "\013\067\001\001\000\002\001\001\000\006\012\142\013" +
    "\024\001\001\000\004\013\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoFCA$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoFCA$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoFCA$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera


        public String resultado = "";
        public static LinkedList<Object> instrucciones;      
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoFCA$actions {

  
  private final SintacticoFCA parser;

  /** Constructor */
  CUP$SintacticoFCA$actions(SintacticoFCA parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoFCA$do_action_part00000000(
    int                        CUP$SintacticoFCA$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFCA$parser,
    java.util.Stack            CUP$SintacticoFCA$stack,
    int                        CUP$SintacticoFCA$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoFCA$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoFCA$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoFCA$parser.done_parsing();
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= mein lla INST llc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 instrucciones = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INST ::= INST INSTRUCCIONES 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INST",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INST ::= INSTRUCCIONES 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a);  
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INST",1, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= DECLARACION_GLOB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= GRAFICABARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		GBarras a = (GBarras)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= GRAFICAPIE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		GPie a = (GPie)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= COMPARE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Comparar a = (Comparar)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= LINEAS 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION_GLOB ::= globales lla VARIABLES llc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = a; 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACION_GLOB",4, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES ::= VARIABLES string identificador igual E pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor c = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = a; RESULT.add(new Variables(1, b, c)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= VARIABLES doubleFCA identificador igual E pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).right;
		LinkedList<Variables> a = (LinkedList<Variables>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor c = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = a; RESULT.add(new Variables(2, b, c)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= string identificador igual E pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Variables(1, a, b)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= doubleFCA identificador igual E pyc 
            {
              LinkedList<Variables> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Variables(2, a, b)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LINEAS ::= lineas lla DEC llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("LINEAS",12, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // COMPARE ::= compare para cadena coma cadena parc pyc 
            {
              Comparar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).value;
		    RESULT = new Comparar(a.substring(1,a.length()-1),b.substring(1,b.length()-1));   
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("COMPARE",3, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GRAFICABARRAS ::= barras lla DEC llc 
            {
              GBarras RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Caracteristica> a = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new GBarras(a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("GRAFICABARRAS",6, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GRAFICAPIE ::= pie lla DEC llc 
            {
              GPie RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Caracteristica> a = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new GPie(a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("GRAFICAPIE",7, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DEC ::= DEC DECLARACIONES 
            {
              LinkedList<Caracteristica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		LinkedList<Caracteristica> a = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Caracteristica b = (Caracteristica)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DEC",8, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEC ::= DECLARACIONES 
            {
              LinkedList<Caracteristica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Caracteristica a = (Caracteristica)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DEC",8, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACIONES ::= titulo dop E pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new Caracteristica(0,a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACIONES ::= ejex dop cora VALORES corc pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).value;
		 RESULT = new Caracteristica(1,a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACIONES ::= valores dop cora VALORES corc pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).value;
		 RESULT = new Caracteristica(2,a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACIONES ::= titulox dop E pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new Caracteristica(3,a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACIONES ::= tituloy dop E pyc 
            {
              Caracteristica RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		 RESULT = new Caracteristica(4,a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACIONES ::= archivo dop E pyc 
            {
              Caracteristica RESULT =null;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",9, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALORES ::= VALORES coma E 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).right;
		LinkedList<Valor> a = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Valor b = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VALORES",10, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALORES ::= E 
            {
              LinkedList<Valor> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		Valor a = (Valor)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("VALORES",10, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= decimal 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(1, new Double(a));  
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= digito 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(2, new Integer(a)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= identificador 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= cadena 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(4, a.substring(1,a.length()-1)); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // E ::= dol lla pesp coma cadena coma cadena coma cadena llc 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-1)).value;
		
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.elementAt(CUP$SintacticoFCA$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // E ::= pgen 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // E ::= pesp 
            {
              Valor RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoFCA$stack.peek()).value;
		 RESULT = new Valor(3, a); 
              CUP$SintacticoFCA$result = parser.getSymbolFactory().newSymbol("E",11, ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoFCA$stack.peek()), RESULT);
            }
          return CUP$SintacticoFCA$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoFCA$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoFCA$do_action(
    int                        CUP$SintacticoFCA$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoFCA$parser,
    java.util.Stack            CUP$SintacticoFCA$stack,
    int                        CUP$SintacticoFCA$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoFCA$do_action_part00000000(
                               CUP$SintacticoFCA$act_num,
                               CUP$SintacticoFCA$parser,
                               CUP$SintacticoFCA$stack,
                               CUP$SintacticoFCA$top);
    }
}

}
