
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_JS.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\005\014\000\002\004\011\000\002\004\011" +
    "\000\002\004\006\000\002\014\004\000\002\014\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\006\011\000\002\006\013\000\002\010" +
    "\011\000\002\015\004\000\002\015\003\000\002\020\005" +
    "\000\002\020\004\000\002\020\004\000\002\007\012\000" +
    "\002\007\011\000\002\007\010\000\002\007\007\000\002" +
    "\007\006\000\002\012\004\000\002\012\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\011\011\000\002\011\010\000\002\016\004\000" +
    "\002\016\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\013\011\000\002\013\010\000\002\013\007" +
    "\000\002\013\010\000\002\013\006\000\002\013\007\000" +
    "\002\013\005\000\002\013\006\000\002\013\004\000\002" +
    "\013\005\000\002\024\003\000\002\024\003\000\002\024" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\030\004\001\002\000\004\040\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\030\020\027\021\026\022" +
    "\011\023\012\024\033\025\031\026\030\034\020\036\015" +
    "\037\013\040\034\001\002\000\004\013\214\001\002\000" +
    "\004\011\203\001\002\000\046\004\uffbe\005\uffbe\006\uffbe" +
    "\010\uffbe\014\uffbe\015\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\034\uffbe\036\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\001\002\000\032\014\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\034\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\001\002\000\046\004\uffbf\005" +
    "\uffbf\006\uffbf\010\uffbf\014\uffbf\015\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\034\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\032\014\ufffe" +
    "\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026" +
    "\ufffe\034\ufffe\036\ufffe\037\ufffe\040\ufffe\001\002\000\032" +
    "\014\202\020\027\021\026\022\011\023\012\024\033\025" +
    "\031\026\030\034\020\036\015\037\013\040\034\001\002" +
    "\000\004\016\167\001\002\000\032\014\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\001\002\000\032\014\ufff6\020" +
    "\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\034\ufff6\036\ufff6\037\ufff6\040\ufff6\001\002\000\032\014" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc\001\002\000" +
    "\004\015\161\001\002\000\032\014\ufff4\020\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\034\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\001\002\000\006\011\145\022\146" +
    "\001\002\000\010\036\015\037\013\040\135\001\002\000" +
    "\004\011\115\001\002\000\004\013\105\001\002\000\032" +
    "\014\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\001\002" +
    "\000\004\011\071\001\002\000\006\011\035\015\uffc0\001" +
    "\002\000\020\006\043\012\044\017\036\036\042\037\040" +
    "\040\045\041\041\001\002\000\020\006\uffd7\012\uffd7\017" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\020" +
    "\006\uffd9\012\uffd9\017\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\001\002\000\026\004\uffcc\005\uffcc\006\uffcc\010\uffcc" +
    "\012\uffcc\017\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\001" +
    "\002\000\026\004\uffcb\005\uffcb\006\uffcb\010\uffcb\012\uffcb" +
    "\017\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002\000" +
    "\026\004\uffcd\005\uffcd\006\uffcd\010\uffcd\012\uffcd\017\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\001\002\000\020\006" +
    "\uffd6\012\uffd6\017\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\001\002\000\004\013\066\001\002\000\020\006\uffd8\012" +
    "\uffd8\017\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002" +
    "\000\020\006\043\012\051\017\036\036\042\037\040\040" +
    "\045\041\041\001\002\000\020\006\uffd5\012\uffd5\017\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\020\006" +
    "\uffda\012\uffda\017\uffda\036\uffda\037\uffda\040\uffda\041\uffda" +
    "\001\002\000\036\010\052\013\053\014\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\034\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\001\002\000\032\014\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000\030\020" +
    "\027\021\026\022\011\023\012\024\033\025\031\026\030" +
    "\034\020\036\015\037\013\040\034\001\002\000\032\014" +
    "\062\020\027\021\026\022\011\023\012\024\033\025\031" +
    "\026\030\034\020\036\015\037\013\040\034\001\002\000" +
    "\032\014\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\034\ufff9\036\ufff9\037\ufff9\040\ufff9\001" +
    "\002\000\032\014\uffff\020\uffff\021\uffff\022\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\034\uffff\036\uffff\037\uffff\040" +
    "\uffff\001\002\000\032\014\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\034\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\001\002\000\032\014\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\034\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\001\002\000\032\014\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\034" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\001\002\000\034\010\065" +
    "\014\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\034\uffde\036\uffde\037\uffde\040\uffde\001\002" +
    "\000\032\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\034\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\001\002\000\032\014\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\034\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\001\002\000\032\014\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\034\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\001\002\000\030\020\027\021\026\022" +
    "\011\023\012\024\033\025\031\026\030\034\020\036\015" +
    "\037\013\040\034\001\002\000\032\014\070\020\027\021" +
    "\026\022\011\023\012\024\033\025\031\026\030\034\020" +
    "\036\015\037\013\040\034\001\002\000\032\014\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\034\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000\016\004" +
    "\074\005\072\036\042\037\040\040\076\041\041\001\002" +
    "\000\022\004\uffe8\005\uffe8\010\uffe8\012\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\001\002\000\022\004\uffec\005\uffec" +
    "\010\uffec\012\uffec\036\uffec\037\uffec\040\uffec\041\uffec\001" +
    "\002\000\022\004\uffea\005\uffea\010\uffea\012\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\001\002\000\020\004\074\005" +
    "\072\012\101\036\042\037\040\040\076\041\041\001\002" +
    "\000\022\004\uffeb\005\uffeb\010\uffeb\012\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\001\002\000\022\004\uffe9\005\uffe9" +
    "\010\uffe9\012\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001" +
    "\002\000\022\004\uffed\005\uffed\010\uffed\012\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\001\002\000\004\013\102\001" +
    "\002\000\030\020\027\021\026\022\011\023\012\024\033" +
    "\025\031\026\030\034\020\036\015\037\013\040\034\001" +
    "\002\000\032\014\104\020\027\021\026\022\011\023\012" +
    "\024\033\025\031\026\030\034\020\036\015\037\013\040" +
    "\034\001\002\000\032\014\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\026\uffe7\034\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\001\002\000\030\020\027\021\026\022\011" +
    "\023\012\024\033\025\031\026\030\034\020\036\015\037" +
    "\013\040\034\001\002\000\032\014\107\020\027\021\026" +
    "\022\011\023\012\024\033\025\031\026\030\034\020\036" +
    "\015\037\013\040\034\001\002\000\004\024\110\001\002" +
    "\000\004\011\111\001\002\000\016\004\074\005\072\036" +
    "\042\037\040\040\076\041\041\001\002\000\020\004\074" +
    "\005\072\012\113\036\042\037\040\040\076\041\041\001" +
    "\002\000\004\010\114\001\002\000\032\014\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\034" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000\004\040\116" +
    "\001\002\000\004\012\117\001\002\000\004\013\120\001" +
    "\002\000\010\031\123\032\121\033\122\001\002\000\004" +
    "\010\133\001\002\000\004\007\132\001\002\000\004\036" +
    "\130\001\002\000\012\014\126\031\123\032\121\033\122" +
    "\001\002\000\012\014\uffe3\031\uffe3\032\uffe3\033\uffe3\001" +
    "\002\000\032\014\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\034\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\001\002\000\012\014\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\001\002\000\004\007\131\001\002\000\012\014\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\001\002\000\012\014\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\001\002\000\012\014\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\001\002\000\044\004\uffc2\005\uffc2\010\136" +
    "\014\uffc2\015\137\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\001\002\000\046\004\uffc0\005\uffc0\006\uffc0\010" +
    "\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\034\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\001\002\000\040\004\uffc4\005\uffc4\014\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\001\002" +
    "\000\010\036\015\037\013\040\135\001\002\000\044\004" +
    "\uffc6\005\uffc6\006\141\010\142\014\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\034\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000\010\036\015" +
    "\037\013\040\135\001\002\000\040\004\uffc8\005\uffc8\014" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001" +
    "\002\000\042\004\uffc9\005\uffc9\010\144\014\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\034" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002\000\040" +
    "\004\uffca\005\uffca\014\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\034\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\001\002\000\016\004\074\005\072\036" +
    "\042\037\040\040\076\041\041\001\002\000\004\011\147" +
    "\001\002\000\004\012\150\001\002\000\004\013\151\001" +
    "\002\000\030\020\027\021\026\022\011\023\012\024\033" +
    "\025\031\026\030\034\020\036\015\037\013\040\034\001" +
    "\002\000\032\014\153\020\027\021\026\022\011\023\012" +
    "\024\033\025\031\026\030\034\020\036\015\037\013\040" +
    "\034\001\002\000\032\014\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\034\uffef\036\uffef\037" +
    "\uffef\040\uffef\001\002\000\020\004\074\005\072\012\155" +
    "\036\042\037\040\040\076\041\041\001\002\000\004\013" +
    "\156\001\002\000\030\020\027\021\026\022\011\023\012" +
    "\024\033\025\031\026\030\034\020\036\015\037\013\040" +
    "\034\001\002\000\032\014\160\020\027\021\026\022\011" +
    "\023\012\024\033\025\031\026\030\034\020\036\015\037" +
    "\013\040\034\001\002\000\032\014\ufff0\020\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\001\002\000\010\036\015\037\013" +
    "\040\135\001\002\000\044\004\uffc1\005\uffc1\006\163\010" +
    "\164\014\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\001\002\000\010\036\015\037\013\040\135\001\002" +
    "\000\040\004\uffc3\005\uffc3\014\uffc3\020\uffc3\021\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\034\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\001\002\000\042\004\uffc5\005" +
    "\uffc5\010\166\014\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\034\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\001\002\000\040\004\uffc7\005\uffc7\014\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\001\002" +
    "\000\004\035\170\001\002\000\004\011\171\001\002\000" +
    "\014\006\172\036\042\037\040\040\173\041\041\001\002" +
    "\000\016\006\uffcf\012\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\001\002\000\016\006\uffd0\012\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\001\002\000\016\006\uffce\012\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\001\002\000\016\006\uffd1" +
    "\012\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\001\002\000" +
    "\016\006\172\012\200\036\042\037\040\040\173\041\041" +
    "\001\002\000\016\006\uffd2\012\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\001\002\000\034\010\201\014\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\034" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\001\002\000\032\014\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\001\002\000\004" +
    "\002\000\001\002\000\012\020\027\036\015\037\013\040" +
    "\135\001\002\000\016\004\074\005\072\036\042\037\040" +
    "\040\076\041\041\001\002\000\020\004\074\005\072\010" +
    "\206\036\042\037\040\040\076\041\041\001\002\000\014" +
    "\006\172\036\042\037\040\040\173\041\041\001\002\000" +
    "\016\006\172\012\210\036\042\037\040\040\173\041\041" +
    "\001\002\000\004\013\211\001\002\000\030\020\027\021" +
    "\026\022\011\023\012\024\033\025\031\026\030\034\020" +
    "\036\015\037\013\040\034\001\002\000\032\014\213\020" +
    "\027\021\026\022\011\023\012\024\033\025\031\026\030" +
    "\034\020\036\015\037\013\040\034\001\002\000\032\014" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1" +
    "\026\ufff1\034\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002\000" +
    "\030\020\027\021\026\022\011\023\012\024\033\025\031" +
    "\026\030\034\020\036\015\037\013\040\034\001\002\000" +
    "\032\014\216\020\027\021\026\022\011\023\012\024\033" +
    "\025\031\026\030\034\020\036\015\037\013\040\034\001" +
    "\002\000\032\014\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\034\uffee\036\uffee\037\uffee\040" +
    "\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\016\004\022\005\031\006\013\007\024\010\021\011" +
    "\020\013\015\024\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\060\005\063\006\054" +
    "\007\062\010\057\011\056\013\055\024\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\045\017\046\021\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\046\021\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\053\004\022\005\031\006\013\007" +
    "\024\010\021\011\020\013\015\024\023\001\001\000\022" +
    "\004\060\005\063\006\054\007\062\010\057\011\056\013" +
    "\055\024\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\066\004\022\005\031\006\013\007" +
    "\024\010\021\011\020\013\015\024\023\001\001\000\022" +
    "\004\060\005\063\006\054\007\062\010\057\011\056\013" +
    "\055\024\023\001\001\000\002\001\001\000\010\014\074" +
    "\017\076\023\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\076\023\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\102\004\022\005\031\006\013" +
    "\007\024\010\021\011\020\013\015\024\023\001\001\000" +
    "\022\004\060\005\063\006\054\007\062\010\057\011\056" +
    "\013\055\024\023\001\001\000\002\001\001\000\024\003" +
    "\105\004\022\005\031\006\013\007\024\010\021\011\020" +
    "\013\015\024\023\001\001\000\022\004\060\005\063\006" +
    "\054\007\062\010\057\011\056\013\055\024\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\111\017" +
    "\076\023\072\001\001\000\006\017\076\023\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\123\020\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\137\001" +
    "\001\000\002\001\001\000\004\024\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\153\017\076\023\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\151\004\022\005" +
    "\031\006\013\007\024\010\021\011\020\013\015\024\023" +
    "\001\001\000\022\004\060\005\063\006\054\007\062\010" +
    "\057\011\056\013\055\024\023\001\001\000\002\001\001" +
    "\000\006\017\076\023\077\001\001\000\002\001\001\000" +
    "\024\003\156\004\022\005\031\006\013\007\024\010\021" +
    "\011\020\013\015\024\023\001\001\000\022\004\060\005" +
    "\063\006\054\007\062\010\057\011\056\013\055\024\023" +
    "\001\001\000\002\001\001\000\004\024\161\001\001\000" +
    "\002\001\001\000\004\024\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\175\017\173\022\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\173\022\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\203\024\023\001\001\000\010\014\204" +
    "\017\076\023\072\001\001\000\006\017\076\023\077\001" +
    "\001\000\010\016\206\017\173\022\174\001\001\000\006" +
    "\017\173\022\176\001\001\000\002\001\001\000\024\003" +
    "\211\004\022\005\031\006\013\007\024\010\021\011\020" +
    "\013\015\024\023\001\001\000\022\004\060\005\063\006" +
    "\054\007\062\010\057\011\056\013\055\024\023\001\001" +
    "\000\002\001\001\000\024\003\214\004\022\005\031\006" +
    "\013\007\024\010\021\011\020\013\015\024\023\001\001" +
    "\000\022\004\060\005\063\006\054\007\062\010\057\011" +
    "\056\013\055\024\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {

  
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ClassJS identificador lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES IF 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= IF 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES FOR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= FOR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES WHILE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= WHILE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES SWITCH 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= SWITCH 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= INSTRUCCIONES METODO 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= METODO 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= INSTRUCCIONES CONSOLE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= CONSOLE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FOR ::= For para DECLARACION COMPARACIONES pyc CONCATENACION parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IF ::= If para COMPARACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IF ::= If Else para parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= Else lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COMPARACIONES ::= COMPARACIONES COMP 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMPARACIONES ::= COMP 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMP ::= identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMP ::= Op_rel 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMP ::= E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMP ::= Op_log 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("COMP",17, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHILE ::= While para COMPARACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WHILE ::= Do lla INSTRUCCIONES llc While para COMPARACIONES parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SWITCH ::= Switch para identificador parc lla CASOS llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASOS ::= CASOS CASE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASOS",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASOS ::= CASE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASOS",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE ::= Case numero dop 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASE ::= Break pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASE ::= Default dop 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO ::= identificador para PARAMETROS parc lla INSTRUCCIONES llc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // METODO ::= identificador para PARAMETROS parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // METODO ::= identificador para parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // METODO ::= identificador para PARAMETROS parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // METODO ::= identificador para PARAMETROS parc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETROS ::= PARAMETROS PAR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETROS ::= PAR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PAR ::= identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PAR ::= coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PAR ::= Op_ari 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PAR ::= E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("PAR",15, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONSOLE ::= Console punto Log para CONCATENACION parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONSOLE ::= Console punto Log para CONCATENACION parc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONCATENACION ::= CONCATENACION CON 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONCATENACION",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONCATENACION ::= CON 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONCATENACION",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CON ::= identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CON",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CON ::= Op_ari 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CON",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CON ::= E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CON",16, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= numero 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= cadena 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= caracter 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= variable I igual I Op_ari I pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= variable I igual I Op_ari I 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= variable I igual I pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= I igual I Op_ari I pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= variable I igual I 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= I igual I Op_ari I 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= variable I pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= I igual I pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= variable I 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= I igual I 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // I ::= identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // I ::= numero 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // I ::= cadena 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("I",18, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
