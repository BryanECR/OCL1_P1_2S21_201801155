
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos_JS.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJS() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\011\000\002\004\006\000\002\006\011\000" +
    "\002\006\013\000\002\005\014\000\002\010\011\000\002" +
    "\014\004\000\002\014\003\000\002\016\005\000\002\016" +
    "\004\000\002\016\004\000\002\011\011\000\002\011\010" +
    "\000\002\007\011\000\002\007\010\000\002\007\007\000" +
    "\002\012\007\000\002\012\006\000\002\012\006\000\002" +
    "\012\005\000\002\015\006\000\002\015\005\000\002\015" +
    "\006\000\002\015\005\000\002\015\006\000\002\017\004" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\027\004\001\002\000\004\041\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\013\010\001\002\000\026\005\013\020\026\021" +
    "\025\022\011\023\012\024\032\025\030\026\027\034\017" +
    "\041\033\001\002\000\004\013\201\001\002\000\004\011" +
    "\170\001\002\000\004\011\165\001\002\000\030\005\ufff8" +
    "\014\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\034\ufff8\041\ufff8\001\002\000\030\005\ufffe" +
    "\014\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\034\ufffe\041\ufffe\001\002\000\030\005\013" +
    "\014\164\020\026\021\025\022\011\023\012\024\032\025" +
    "\030\026\027\034\017\041\033\001\002\000\004\016\156" +
    "\001\002\000\030\005\ufff2\014\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\034\ufff2\041\ufff2" +
    "\001\002\000\030\005\ufff6\014\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\034\ufff6\041\ufff6" +
    "\001\002\000\030\005\ufffc\014\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\034\ufffc\041\ufffc" +
    "\001\002\000\030\005\ufff4\014\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\034\ufff4\041\ufff4" +
    "\001\002\000\030\005\ufff0\014\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\034\ufff0\041\ufff0" +
    "\001\002\000\006\011\142\022\143\001\002\000\004\041" +
    "\134\001\002\000\004\011\115\001\002\000\004\013\105" +
    "\001\002\000\030\005\ufffa\014\ufffa\020\ufffa\021\ufffa\022" +
    "\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\034\ufffa\041\ufffa" +
    "\001\002\000\004\011\077\001\002\000\006\011\034\015" +
    "\035\001\002\000\024\004\052\005\046\006\051\012\053" +
    "\017\047\036\036\037\037\040\042\041\054\001\002\000" +
    "\012\036\036\037\037\040\042\041\040\001\002\000\050" +
    "\004\uffcd\005\uffcd\006\uffcd\010\uffcd\012\uffcd\014\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\034\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\001" +
    "\002\000\050\004\uffcc\005\uffcc\006\uffcc\010\uffcc\012\uffcc" +
    "\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\034\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\001\002\000\032\005\uffd9\010\044\014\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\034\uffd9\041\uffd9\001\002\000\032\005\uffd7\010\043\014" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\034\uffd7\041\uffd7\001\002\000\050\004\uffcb\005" +
    "\uffcb\006\uffcb\010\uffcb\012\uffcb\014\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\034" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\001\002\000\030" +
    "\005\uffd8\014\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\034\uffd8\041\uffd8\001\002\000\030" +
    "\005\uffda\014\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\034\uffda\041\uffda\001\002\000\026" +
    "\004\uffd4\005\uffd4\006\uffd4\010\uffd4\012\uffd4\017\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002\000\026\004\uffd1" +
    "\005\uffd1\006\uffd1\010\uffd1\012\uffd1\017\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\041\uffd1\001\002\000\026\004\uffce\005\uffce" +
    "\006\uffce\010\uffce\012\uffce\017\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\001\002\000\024\004\052\005\046\006\051" +
    "\012\072\017\047\036\036\037\037\040\042\041\054\001" +
    "\002\000\026\004\uffd3\005\uffd3\006\uffd3\010\uffd3\012\uffd3" +
    "\017\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\001\002\000" +
    "\026\004\uffd2\005\uffd2\006\uffd2\010\uffd2\012\uffd2\017\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002\000\004\013" +
    "\056\001\002\000\026\004\uffcf\005\uffcf\006\uffcf\010\uffcf" +
    "\012\uffcf\017\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001" +
    "\002\000\026\004\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0" +
    "\017\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002\000" +
    "\026\005\013\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\013\014\065\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\ufff9\014\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\034\ufff9\041\ufff9\001\002\000\030\005" +
    "\uffff\014\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff" +
    "\025\uffff\026\uffff\034\uffff\041\uffff\001\002\000\030\005" +
    "\ufff3\014\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\034\ufff3\041\ufff3\001\002\000\030\005" +
    "\ufff7\014\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\034\ufff7\041\ufff7\001\002\000\030\005" +
    "\ufffd\014\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\034\ufffd\041\ufffd\001\002\000\030\005" +
    "\uffe0\014\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\034\uffe0\041\uffe0\001\002\000\030\005" +
    "\ufff5\014\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\034\ufff5\041\ufff5\001\002\000\030\005" +
    "\ufff1\014\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\034\ufff1\041\ufff1\001\002\000\030\005" +
    "\ufffb\014\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\034\ufffb\041\ufffb\001\002\000\026\004" +
    "\uffd5\005\uffd5\006\uffd5\010\uffd5\012\uffd5\017\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\001\002\000\006\010\073\013" +
    "\074\001\002\000\030\005\uffdf\014\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\034\uffdf\041" +
    "\uffdf\001\002\000\026\005\013\020\026\021\025\022\011" +
    "\023\012\024\032\025\030\026\027\034\017\041\033\001" +
    "\002\000\030\005\013\014\076\020\026\021\025\022\011" +
    "\023\012\024\032\025\030\026\027\034\017\041\033\001" +
    "\002\000\030\005\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\041\uffe1\001" +
    "\002\000\022\004\052\005\046\006\051\017\047\036\036" +
    "\037\037\040\042\041\054\001\002\000\024\004\052\005" +
    "\046\006\051\012\101\017\047\036\036\037\037\040\042" +
    "\041\054\001\002\000\004\013\102\001\002\000\026\005" +
    "\013\020\026\021\025\022\011\023\012\024\032\025\030" +
    "\026\027\034\017\041\033\001\002\000\030\005\013\014" +
    "\104\020\026\021\025\022\011\023\012\024\032\025\030" +
    "\026\027\034\017\041\033\001\002\000\030\005\uffec\014" +
    "\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\034\uffec\041\uffec\001\002\000\026\005\013\020" +
    "\026\021\025\022\011\023\012\024\032\025\030\026\027" +
    "\034\017\041\033\001\002\000\030\005\013\014\107\020" +
    "\026\021\025\022\011\023\012\024\032\025\030\026\027" +
    "\034\017\041\033\001\002\000\004\024\110\001\002\000" +
    "\004\011\111\001\002\000\022\004\052\005\046\006\051" +
    "\017\047\036\036\037\037\040\042\041\054\001\002\000" +
    "\024\004\052\005\046\006\051\012\113\017\047\036\036" +
    "\037\037\040\042\041\054\001\002\000\004\010\114\001" +
    "\002\000\030\005\uffeb\014\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\025\uffeb\026\uffeb\034\uffeb\041\uffeb\001" +
    "\002\000\004\041\116\001\002\000\004\012\117\001\002" +
    "\000\004\013\120\001\002\000\010\031\123\032\121\033" +
    "\122\001\002\000\004\010\133\001\002\000\004\007\132" +
    "\001\002\000\004\036\130\001\002\000\012\014\126\031" +
    "\123\032\121\033\122\001\002\000\012\014\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\001\002\000\030\005\uffe9\014\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\034\uffe9\041\uffe9\001\002\000\012\014\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\001\002\000\004\007\131\001\002\000\012" +
    "\014\uffe6\031\uffe6\032\uffe6\033\uffe6\001\002\000\012\014" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000\012\014\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\001\002\000\012\015\135\036" +
    "\036\037\037\040\042\001\002\000\004\041\140\001\002" +
    "\000\046\004\uffdb\005\uffdb\006\uffdb\010\137\014\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001" +
    "\002\000\044\004\uffdc\005\uffdc\006\uffdc\014\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001\002" +
    "\000\046\004\uffdd\005\uffdd\006\uffdd\010\141\014\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd" +
    "\026\uffdd\034\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\044\004\uffde\005\uffde\006\uffde\014\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\034\uffde\036\uffde\037\uffde\040\uffde\041\uffde\001\002" +
    "\000\022\004\052\005\046\006\051\017\047\036\036\037" +
    "\037\040\042\041\054\001\002\000\004\011\144\001\002" +
    "\000\004\012\145\001\002\000\004\013\146\001\002\000" +
    "\026\005\013\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\013\014\150\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\uffee\014\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\026\uffee\034\uffee\041\uffee\001\002\000\024\004" +
    "\052\005\046\006\051\012\152\017\047\036\036\037\037" +
    "\040\042\041\054\001\002\000\004\013\153\001\002\000" +
    "\026\005\013\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\013\014\155\020\026\021\025\022\011\023\012\024\032" +
    "\025\030\026\027\034\017\041\033\001\002\000\030\005" +
    "\uffef\014\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\034\uffef\041\uffef\001\002\000\004\035" +
    "\157\001\002\000\004\011\160\001\002\000\022\004\052" +
    "\005\046\006\051\017\047\036\036\037\037\040\042\041" +
    "\054\001\002\000\024\004\052\005\046\006\051\012\162" +
    "\017\047\036\036\037\037\040\042\041\054\001\002\000" +
    "\032\005\uffe2\010\163\014\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\034\uffe2\041\uffe2\001" +
    "\002\000\030\005\uffe3\014\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\034\uffe3\041\uffe3\001" +
    "\002\000\004\002\000\001\002\000\022\004\052\005\046" +
    "\006\051\017\047\036\036\037\037\040\042\041\054\001" +
    "\002\000\024\004\052\005\046\006\051\012\167\017\047" +
    "\036\036\037\037\040\042\041\054\001\002\000\030\005" +
    "\uffd6\014\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\034\uffd6\041\uffd6\001\002\000\004\020" +
    "\026\001\002\000\022\004\052\005\046\006\051\017\047" +
    "\036\036\037\037\040\042\041\054\001\002\000\024\004" +
    "\052\005\046\006\051\010\173\017\047\036\036\037\037" +
    "\040\042\041\054\001\002\000\022\004\052\005\046\006" +
    "\051\017\047\036\036\037\037\040\042\041\054\001\002" +
    "\000\024\004\052\005\046\006\051\012\175\017\047\036" +
    "\036\037\037\040\042\041\054\001\002\000\004\013\176" +
    "\001\002\000\026\005\013\020\026\021\025\022\011\023" +
    "\012\024\032\025\030\026\027\034\017\041\033\001\002" +
    "\000\030\005\013\014\200\020\026\021\025\022\011\023" +
    "\012\024\032\025\030\026\027\034\017\041\033\001\002" +
    "\000\030\005\uffea\014\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\034\uffea\041\uffea\001\002" +
    "\000\026\005\013\020\026\021\025\022\011\023\012\024" +
    "\032\025\030\026\027\034\017\041\033\001\002\000\030" +
    "\005\013\014\203\020\026\021\025\022\011\023\012\024" +
    "\032\025\030\026\027\034\017\041\033\001\002\000\030" +
    "\005\uffed\014\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\034\uffed\041\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\015\004\021\005\030\006\013\007\022\010\020\011" +
    "\017\012\014\015\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\063\005\067\006\057\007\065\010\062" +
    "\011\061\012\060\015\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\054\017" +
    "\047\020\044\001\001\000\004\013\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\054\020\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\056\004\021\005\030\006\013\007\022" +
    "\010\020\011\017\012\014\015\023\001\001\000\022\004" +
    "\063\005\067\006\057\007\065\010\062\011\061\012\060" +
    "\015\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\074\004\021\005\030\006\013\007\022\010" +
    "\020\011\017\012\014\015\023\001\001\000\022\004\063" +
    "\005\067\006\057\007\065\010\062\011\061\012\060\015" +
    "\066\001\001\000\002\001\001\000\010\013\054\017\077" +
    "\020\044\001\001\000\006\013\054\020\070\001\001\000" +
    "\002\001\001\000\024\003\102\004\021\005\030\006\013" +
    "\007\022\010\020\011\017\012\014\015\023\001\001\000" +
    "\022\004\063\005\067\006\057\007\065\010\062\011\061" +
    "\012\060\015\066\001\001\000\002\001\001\000\024\003" +
    "\105\004\021\005\030\006\013\007\022\010\020\011\017" +
    "\012\014\015\023\001\001\000\022\004\063\005\067\006" +
    "\057\007\065\010\062\011\061\012\060\015\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\054\017" +
    "\111\020\044\001\001\000\006\013\054\020\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\123\016\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\054" +
    "\017\150\020\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\146\004\021\005\030" +
    "\006\013\007\022\010\020\011\017\012\014\015\023\001" +
    "\001\000\022\004\063\005\067\006\057\007\065\010\062" +
    "\011\061\012\060\015\066\001\001\000\002\001\001\000" +
    "\006\013\054\020\070\001\001\000\002\001\001\000\024" +
    "\003\153\004\021\005\030\006\013\007\022\010\020\011" +
    "\017\012\014\015\023\001\001\000\022\004\063\005\067" +
    "\006\057\007\065\010\062\011\061\012\060\015\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\054\017\160\020\044\001\001\000\006\013" +
    "\054\020\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\054\017\165\020\044\001" +
    "\001\000\006\013\054\020\070\001\001\000\002\001\001" +
    "\000\004\012\170\001\001\000\010\013\054\017\171\020" +
    "\044\001\001\000\006\013\054\020\070\001\001\000\010" +
    "\013\054\017\173\020\044\001\001\000\006\013\054\020" +
    "\070\001\001\000\002\001\001\000\024\003\176\004\021" +
    "\005\030\006\013\007\022\010\020\011\017\012\014\015" +
    "\023\001\001\000\022\004\063\005\067\006\057\007\065" +
    "\010\062\011\061\012\060\015\066\001\001\000\002\001" +
    "\001\000\024\003\201\004\021\005\030\006\013\007\022" +
    "\010\020\011\017\012\014\015\023\001\001\000\022\004" +
    "\063\005\067\006\057\007\065\010\062\011\061\012\060" +
    "\015\066\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        //Podemos crear variables, listas, etc;
        // deben de ser staticas si se quieren usar fuera
        

        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJS$actions {

  
  private final SintacticoJS parser;

  /** Constructor */
  CUP$SintacticoJS$actions(SintacticoJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action_part00000000(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJS$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJS$parser.done_parsing();
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ClassJS identificador lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES DECLARACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= DECLARACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES IF 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCIONES ::= IF 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCIONES ::= INSTRUCCIONES FOR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= FOR 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCIONES ::= INSTRUCCIONES WHILE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= WHILE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCIONES ::= INSTRUCCIONES SWITCH 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= SWITCH 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= INSTRUCCIONES METODO 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONES ::= METODO 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONES ::= INSTRUCCIONES CONSOLE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONES ::= CONSOLE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONES ::= INSTRUCCIONES ASIGNACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONES ::= ASIGNACION 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IF ::= If para OPERACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= If Else para parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= Else lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("IF",2, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // WHILE ::= While para OPERACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // WHILE ::= Do lla INSTRUCCIONES llc While para OPERACIONES parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("WHILE",4, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FOR ::= For para DECLARACION OPERACIONES pyc OPERACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SWITCH ::= Switch para identificador parc lla CASOS llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("SWITCH",6, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASOS ::= CASOS CASE 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASOS",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASOS ::= CASE 
            {
              Object RESULT =null;

              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASOS",10, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASE ::= Case numero dop 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE ::= Break pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= Default dop 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONSOLE ::= Console punto Log para OPERACIONES parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONSOLE ::= Console punto Log para OPERACIONES parc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("CONSOLE",7, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // METODO ::= identificador para OPERACIONES parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // METODO ::= identificador para parc lla INSTRUCCIONES llc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // METODO ::= identificador para OPERACIONES parc pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("METODO",5, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= variable identificador igual identificador pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= variable identificador igual identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= variable identificador E pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= variable identificador E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= identificador igual identificador pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= identificador igual identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= identificador igual E pyc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= identificador igual E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Op_log para OPERACIONES parc 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACIONES ::= OPERACIONES OP 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPERACIONES",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.elementAt(CUP$SintacticoJS$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERACIONES ::= OP 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OPERACIONES",13, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP ::= Op_ari 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP ::= Op_rel 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP ::= Op_log 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= E 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= identificador 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= coma 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= numero 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= cadena 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= caracter 
            {
              Object RESULT =null;
		
              CUP$SintacticoJS$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJS$stack.peek()), RESULT);
            }
          return CUP$SintacticoJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJS$do_action(
    int                        CUP$SintacticoJS$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJS$parser,
    java.util.Stack            CUP$SintacticoJS$stack,
    int                        CUP$SintacticoJS$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJS$do_action_part00000000(
                               CUP$SintacticoJS$act_num,
                               CUP$SintacticoJS$parser,
                               CUP$SintacticoJS$stack,
                               CUP$SintacticoJS$top);
    }
}

}
